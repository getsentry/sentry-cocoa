name: Assemble XCFramework Variant

on:
  workflow_call:
    inputs:
      name:
        description: |-
          The Sentry project target to build an XCFramework slice for.
          Possible values: Sentry, SentrySwiftUI.
        required: true
        type: string

      suffix:
        description: |-
          The suffix to add to the build product name.
          E.g. "-Dynamic" or "-WithoutUIKitOrAppKit".
        required: false
        type: string

      configuration-suffix:
        description: |-
          The suffix to add to the build product name to build an alternate configuration of the target.
          E.g. "WithoutUIKit".
        required: false
        type: string

      variant-id:
        description: |-
          The ID of the variant to build an XCFramework slice for. Used to collect appropriate slices for final deliverable assembly.
          E.g. "sentry-static", "sentry-dynamic" or "sentry-withoutuikit-dynamic"
        required: true
        type: string

      signed:
        description: |-
          Whether or not the assembled XCFramework should be signed.
        required: false
        type: boolean
        default: false

      sdks:
        description: |-
          The SDK slices to assemble into an XCFramework.
        required: false
        type: string
        default: "iphoneos,iphonesimulator,macosx,maccatalyst,appletvos,appletvsimulator,watchos,watchsimulator,xros,xrsimulator"

      release-version:
        description: |-
          For release workflows, the version to inject into the SDK.
        required: false
        type: string

jobs:
  assemble-xcframework-variant:
    name: ${{inputs.name}}${{inputs.suffix}}

    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1
        if: ${{ inputs.signed }}
        with:
          bundler-cache: true

      - name: "Download Fastlane Certificate"
        if: ${{ inputs.signed }}
        run: bundle exec fastlane prepare_xcframework_signing
        env:
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY: ${{ secrets.APP_STORE_CONNECT_KEY }}
          FASTLANE_KEYCHAIN_PASSWORD: ${{ secrets.FASTLANE_KEYCHAIN_PASSWORD }}
          MATCH_GIT_PRIVATE_KEY: ${{ secrets.MATCH_GIT_PRIVATE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_USERNAME: ${{ secrets.MATCH_USERNAME }}

      - name: Get version
        id: get-version
        run: |
          if [ -n "${{ inputs.release-version }}" ]; then
            echo "VERSION=${{ inputs.release-version }}" >> $GITHUB_ENV
          else
            echo "VERSION=$(grep MARKETING_VERSION Sources/Configuration/Versioning.xcconfig | cut -d ' ' -f 3)+${{ github.sha }}" >> $GITHUB_ENV
          fi
        shell: sh

      - name: Compute cache key
        run: |
          sdks_string=${{inputs.sdks}}
          sdks_string_slugified=${sdks_string//,/_}
          echo "SENTRY_XCFRAMEWORK_CACHE_KEY=${{runner.os}}-xcframework-${{inputs.variant-id}}-$sdks_string_slugified-${{inputs.signed}}-${{env.VERSION}}-${{hashFiles('Sources/**')}}-${{hashFiles('Sentry.xcodeproj/**')}}" >> $GITHUB_ENV

      - name: Restore XCFramework cache
        id: cache-xcframework
        uses: actions/cache@v4
        with:
          key: ${{env.SENTRY_XCFRAMEWORK_CACHE_KEY}}
          path: ${{inputs.name}}${{inputs.suffix}}.xcframework.zip

      - name: Download ${{inputs.variant-id}} Slices
        if: steps.cache-xcframework.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          pattern: xcframework-${{inputs.variant-id}}-slice-*
          path: xcframework-slices

      - name: Unzip slice artifact ZIP archives
        if: steps.cache-xcframework.outputs.cache-hit != 'true'
        run: |
          find xcframework-slices -type f -print0 | xargs -t0I @ unzip @ -d xcframework-slices
        shell: bash

      - name: Assemble XCFramework
        if: steps.cache-xcframework.outputs.cache-hit != 'true'
        run: ./scripts/assemble-xcframework.sh "${{inputs.name}}" "${{inputs.suffix}}" "${{inputs.configuration-suffix}}" "${{inputs.sdks}}" "/Users/runner/work/sentry-cocoa/sentry-cocoa/xcframework-slices/SDK_NAME.xcarchive"
        shell: bash

      - name: Zip XCFramework
        if: steps.cache-xcframework.outputs.cache-hit != 'true'
        run: ./scripts/compress-xcframework.sh ${{inputs.signed && '--sign' || '--not-signed'}} ${{inputs.name}}${{inputs.suffix}}
        shell: bash

      - name: Cache XCFramework
        uses: actions/cache@v4
        with:
          key: ${{env.SENTRY_XCFRAMEWORK_CACHE_KEY}}
          path: ${{inputs.name}}${{inputs.suffix}}.xcframework.zip

      - name: Upload XCFramework
        uses: actions/upload-artifact@v4
        with:
          overwrite: true
          name: xcframework-${{github.sha}}-${{inputs.variant-id}}
          if-no-files-found: error
          path: ${{inputs.name}}${{inputs.suffix}}.xcframework.zip
