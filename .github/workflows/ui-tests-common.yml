name: UI Tests Common

on:
  workflow_call:
    inputs:
      fastlane_command:
        description: "The fastlane command to run"
        required: true
        type: string
      files_suffix:
        description: "Suffix for the files to upload"
        required: false
        default: ""
        type: string
      xcode_version:
        description: "Xcode version"
        required: true
        type: string
      build_with_make:
        description: "Build with make"
        required: false
        default: false
        type: boolean
      macos_version:
        description: "macOS version"
        required: true
        type: string
      needs_xcframework:
        description: "Whether the workflow needs to download the XCFramework."
        required: false
        default: false
        type: boolean
      codecov_test_analytics:
        description: "Whether or not to push results to Codecov for analytics."
        required: false
        default: false
        type: boolean
      test-destination-os:
        description: "Test destination OS"
        required: false
        default: ""
        type: string
      create_device:
        description: "Whether to create the device for the given platform and OS version"
        required: false
        default: false
        type: boolean
      device:
        description: "Device"
        required: false
        default: ""
        type: string
      install_platforms:
        description: "Whether to install the platforms"
        required: false
        default: false
        type: boolean
      platform:
        description: "Additional platform to install"
        required: false
        default: ""
        type: string
    secrets:
      CODECOV_TOKEN:
        required: true

jobs:
  common-ui-tests:
    name: UI Tests Common
    runs-on: ${{ inputs.macos_version }}
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v5

      - name: Setup Ruby
        uses: ruby/setup-ruby@13e7a03dc3ac6c3798f4570bfead2aed4d96abfb # v1.244.0
        with:
          bundler-cache: true

      - name: Install old xcodegen
        if: ${{ inputs.xcode_version == '14.3.1' || inputs.xcode_version == '15.4' }}
        # Install xcodegen 2.43.0 for since newer versions don't work with Xcode older than Xcode 16
        # We need to set HOMEBREW_DEVELOPER=1 to allow installing from a local formula
        run: |
          HOMEBREW_DEVELOPER=1 brew install --formula ./scripts/xcodegen.rb
          brew pin xcodegen

      - name: Select Xcode version
        env:
          XCODE_VERSION: ${{ inputs.xcode_version }}
        run: ./scripts/ci-select-xcode.sh "$XCODE_VERSION"

      - name: Enable XCBuild Debug Logging
        run: |
          # Enable debug activity logs (minimal overhead, safe to leave on)
          defaults write com.apple.dt.XCBuild EnableDebugActivityLogs -bool YES
          # Enable build debugging mode (generates build.trace files in DerivedData)
          defaults write com.apple.dt.XCBuild EnableBuildDebugging -bool YES
          echo "‚úÖ XCBuild debug logging enabled"
          echo "Build trace files will be generated at: ~/Library/Developer/Xcode/DerivedData/*/Build/Intermediates.noindex/XCBuildData/buildDebugging-*/build.trace"

          # Show current XCBuild settings
          echo "üìã Current XCBuild Debug Settings:"
          defaults read com.apple.dt.XCBuild 2>/dev/null || echo "No custom XCBuild defaults found"

          # Show environment variables for debugging
          echo "üìã Debugging-related environment variables:"
          env | grep -E '(ENABLE|DEBUG|VERBOSE|XCODE|FASTLANE|LOG)' | sort || true

      - name: Install required platforms for Xcode 26
        if: ${{ inputs.install_platforms }}
        env:
          PLATFORM: ${{ inputs.platform }}
          OS_VERSION: ${{ inputs.test-destination-os }}
        run: ./scripts/ci-install-platforms.sh --platforms "$PLATFORM" --os-version "$OS_VERSION"

      - name: Create simulator device
        if: ${{ inputs.create_device }}
        env:
          PLATFORM: ${{ inputs.platform }}
          OS_VERSION: ${{ inputs.test-destination-os }}
          DEVICE_NAME: ${{ inputs.device }}
        run: ./scripts/ci-create-simulator.sh --platform "$PLATFORM" --os-version "$OS_VERSION" --device-name "$DEVICE_NAME"

      # Boot created simulators to ensure they're ready before tests run
      # Based on CircleCI forum comment, booting is especially important for Xcode 26: https://discuss.circleci.com/t/xcode-26-rc/54066/18
      - name: Boot simulator
        if: ${{ inputs.create_device && inputs.platform == 'iOS' }}
        env:
          XCODE_VERSION: ${{ inputs.xcode_version }}
          DEVICE_NAME: ${{ inputs.device }}
          OS_VERSION: ${{ inputs.test-destination-os }}
        run: ./scripts/ci-boot-simulator.sh --xcode "$XCODE_VERSION" --device "$DEVICE_NAME" --os-version "$OS_VERSION"

      - name: Show Simulator and Xcode Information
        run: |
          echo "üì± Available Simulators:"
          xcrun simctl list devices available

          echo ""
          echo "üì± Booted Simulators:"
          xcrun simctl list devices | grep Booted || echo "No booted simulators"

          echo ""
          echo "üîß Xcode Version Information:"
          xcodebuild -version

          echo ""
          echo "üîß Available SDK Versions:"
          xcodebuild -showsdks

          echo ""
          echo "üîß Xcode Path:"
          xcode-select -p

      - run: make init-ci-build
        if: ${{ inputs.build_with_make }}

      - run: make xcode-ci
        if: ${{ inputs.build_with_make }}

      - name: Add Microphone permissions
        uses: ./.github/actions/add-microphone-permissions

      - name: Download XCFramework
        if: ${{ inputs.needs_xcframework }}
        uses: actions/download-artifact@v6
        with:
          name: xcframework-${{github.sha}}-sentry-static
          path: Carthage/

      - name: Unzip XCFramework
        if: ${{ inputs.needs_xcframework }}
        run: |
          unzip -o Carthage/Sentry.xcframework.zip -d Carthage/

      - name: Run Fastlane
        env:
          FASTLANE_COMMAND: ${{ inputs.fastlane_command }}
          DEVICE: ${{ inputs.device }}
          TEST_DESTINATION_OS: ${{ inputs.test-destination-os }}
        run: |
          if [ -n "$DEVICE" ] && [ -n "$TEST_DESTINATION_OS" ]; then
            bundle exec fastlane "$FASTLANE_COMMAND" device:"$DEVICE ($TEST_DESTINATION_OS)"
          else
            bundle exec fastlane "$FASTLANE_COMMAND"
          fi

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@5b7ee5a21e8674b695313d769f3cbdfd5d4d53a4 # v6.0.0
        if: always()
        with:
          report_paths: build/reports/*junit.xml
          fail_on_failure: true
          fail_on_parse_error: true
          detailed_summary: true

      - name: List DerivedData and Build Artifacts
        if: always()
        continue-on-error: true
        run: |
          echo "üìÅ DerivedData Directory Structure:"
          ls -lah ~/Library/Developer/Xcode/DerivedData/ || echo "DerivedData not found"

          echo ""
          echo "üîç Looking for XCBuildData directories:"
          find ~/Library/Developer/Xcode/DerivedData -type d -name "XCBuildData" -print || echo "No XCBuildData directories found"

          echo ""
          echo "üîç Looking for build.trace files:"
          find ~/Library/Developer/Xcode/DerivedData -name "build.trace" -type f -ls || echo "No build.trace files found"

          echo ""
          echo "üìÅ Fastlane test_output directory:"
          ls -lah ./fastlane/test_output/ 2>/dev/null || echo "No test_output directory found"

      - name: Codecov test analytics
        if: ${{ !cancelled() && inputs.codecov_test_analytics }}
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # pin@v1.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          name: sentry-cocoa-unit-tests
          flags: ui-tests-${{ inputs.fastlane_command }}-${{ inputs.xcode_version }}, ui-tests

      - name: Upload Result Bundle
        uses: actions/upload-artifact@v5
        if: ${{ failure() }}
        with:
          name: ${{ inputs.fastlane_command }}${{ inputs.files_suffix }}
          path: |
            fastlane/test_results/**/*.xcresult

      - name: Upload iOS Simulator Crash Logs
        uses: actions/upload-artifact@v5
        if: ${{ failure() }}
        with:
          name: ${{ inputs.fastlane_command }}${{ inputs.files_suffix }}_crash_logs
          path: |
            ~/Library/Logs/DiagnosticReports/**

      - name: Archiving Raw Test Logs
        uses: actions/upload-artifact@v5
        if: ${{ failure() || cancelled() }}
        with:
          name: ${{ inputs.fastlane_command }}${{ inputs.files_suffix }}_raw_output
          path: |
            ~/Library/Logs/scan/*.log
            ./fastlane/test_output/**

      - name: Collect XCBuild Debug Traces
        if: ${{ failure() || cancelled() }}
        continue-on-error: true
        run: |
          echo "üîç Searching for build.trace files..."
          find ~/Library/Developer/Xcode/DerivedData -name "build.trace" -type f -print

          # Create a directory to collect all traces
          mkdir -p xcbuild-traces

          # Copy all build.trace files to the collection directory
          find ~/Library/Developer/Xcode/DerivedData -name "build.trace" -type f -exec cp {} xcbuild-traces/ \; || true

          # Rename them with timestamps to avoid conflicts
          cd xcbuild-traces
          for file in build.trace*; do
            if [ -f "$file" ]; then
              timestamp=$(stat -f %Sm -t "%Y%m%d_%H%M%S" "$file")
              mv "$file" "build_trace_${timestamp}.txt"
            fi
          done

          ls -lh
          echo "‚úÖ Collected $(ls -1 | wc -l) build trace files"

      - name: Upload XCBuild Debug Traces
        uses: actions/upload-artifact@v5
        if: ${{ failure() || cancelled() }}
        with:
          name: ${{ inputs.fastlane_command }}${{ inputs.files_suffix }}_xcbuild_traces
          path: xcbuild-traces/

      - name: Collect Xcode Activity Logs
        if: ${{ failure() || cancelled() }}
        continue-on-error: true
        run: |
          echo "üîç Searching for xcactivitylog files..."
          find ~/Library/Developer/Xcode/DerivedData -name "*.xcactivitylog" -type f -print

          # Create a directory to collect all activity logs
          mkdir -p xcode-activity-logs

          # Copy all xcactivitylog files
          find ~/Library/Developer/Xcode/DerivedData -name "*.xcactivitylog" -type f -exec cp {} xcode-activity-logs/ \; || true

          # Also look for scheme-specific logs
          find ~/Library/Developer/Xcode/DerivedData -path "*/Logs/Build/*.xcactivitylog" -type f -exec cp {} xcode-activity-logs/ \; || true

          echo "‚úÖ Collected $(ls -1 xcode-activity-logs 2>/dev/null | wc -l) activity log files"
          ls -lh xcode-activity-logs/ 2>/dev/null || echo "No activity logs collected"

      - name: Upload Xcode Activity Logs
        uses: actions/upload-artifact@v5
        if: ${{ failure() || cancelled() }}
        with:
          name: ${{ inputs.fastlane_command }}${{ inputs.files_suffix }}_xcode_activity_logs
          path: xcode-activity-logs/

      - name: Collect Full Xcode Build Logs
        if: ${{ failure() || cancelled() }}
        continue-on-error: true
        run: |
          echo "üîç Collecting comprehensive build logs from DerivedData..."

          # Create directory for logs
          mkdir -p comprehensive-build-logs

          # Find the most recent DerivedData folder for this project
          DERIVED_DATA_PROJECT=$(find ~/Library/Developer/Xcode/DerivedData -maxdepth 1 -type d -name "Sentry-*" | head -1)

          if [ -n "$DERIVED_DATA_PROJECT" ]; then
            echo "Found DerivedData project at: $DERIVED_DATA_PROJECT"

            # Copy all logs directory
            if [ -d "$DERIVED_DATA_PROJECT/Logs" ]; then
              cp -R "$DERIVED_DATA_PROJECT/Logs" comprehensive-build-logs/ || true
              echo "‚úÖ Copied Logs directory"
            fi

            # Copy build settings
            if [ -d "$DERIVED_DATA_PROJECT/Build/Intermediates.noindex" ]; then
              find "$DERIVED_DATA_PROJECT/Build/Intermediates.noindex" -name "*.hmap" -o -name "all-product-headers.yaml" | head -20 | xargs -I {} cp {} comprehensive-build-logs/ || true
              echo "‚úÖ Copied build intermediates"
            fi

            # Get directory structure
            tree -L 4 "$DERIVED_DATA_PROJECT" > comprehensive-build-logs/derived-data-structure.txt 2>&1 || \
            find "$DERIVED_DATA_PROJECT" -maxdepth 4 -type d | sed 's|[^/]*/| |g' > comprehensive-build-logs/derived-data-structure.txt

            echo "‚úÖ Collected comprehensive build logs"
          else
            echo "‚ö†Ô∏è  Could not find DerivedData project directory"
          fi

          ls -lah comprehensive-build-logs/ 2>/dev/null || echo "No comprehensive logs collected"

      - name: Upload Comprehensive Build Logs
        uses: actions/upload-artifact@v5
        if: ${{ failure() || cancelled() }}
        with:
          name: ${{ inputs.fastlane_command }}${{ inputs.files_suffix }}_comprehensive_build_logs
          path: comprehensive-build-logs/

      - name: Collect Simulator System Logs
        if: ${{ failure() || cancelled() }}
        continue-on-error: true
        run: |
          echo "üì± Collecting simulator system logs..."

          # Get all booted simulators
          BOOTED_SIMULATORS=$(xcrun simctl list devices | grep "Booted" | grep -oE "[0-9A-F-]{36}" || true)

          if [ -z "$BOOTED_SIMULATORS" ]; then
            echo "‚ö†Ô∏è  No booted simulators found"
          else
            mkdir -p simulator-logs

            for UDID in $BOOTED_SIMULATORS; do
              echo "Collecting logs for simulator: $UDID"

              # Get simulator info
              xcrun simctl list devices | grep "$UDID" > "simulator-logs/simulator-${UDID}-info.txt" || true

              # Collect system log archive (most comprehensive)
              echo "Collecting log archive..."
              xcrun simctl spawn "$UDID" log collect --output "simulator-logs/system-log-${UDID}.logarchive" 2>&1 || true

              # Also get a text export of recent logs
              echo "Exporting recent logs as text..."
              xcrun simctl spawn "$UDID" log show --last 30m --info --debug > "simulator-logs/recent-logs-${UDID}.txt" 2>&1 || true

              # Get sysdiagnose if available
              echo "Attempting to collect sysdiagnose..."
              xcrun simctl diagnose --data-path "simulator-logs/sysdiagnose-${UDID}" "$UDID" 2>&1 || true

            done

            echo "‚úÖ Simulator logs collected"
            ls -lh simulator-logs/ 2>/dev/null
          fi

      - name: Upload Simulator System Logs
        uses: actions/upload-artifact@v5
        if: ${{ failure() || cancelled() }}
        with:
          name: ${{ inputs.fastlane_command }}${{ inputs.files_suffix }}_simulator_logs
          path: simulator-logs/

      - name: Store screenshot
        uses: ./.github/actions/capture-screenshot
        if: failure()
        with:
          suffix: ${{ inputs.fastlane_command }}${{ inputs.files_suffix }}

      - name: Run CI Diagnostics
        if: failure()
        run: ./scripts/ci-diagnostics.sh
