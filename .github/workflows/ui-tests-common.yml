name: UI Tests Common

on:
  workflow_call:
    inputs:
      fastlane_command:
        description: "The fastlane command to run"
        required: true
        type: string
      fastlane_command_extra_arguments:
        description: "Extra arguments for the fastlane command"
        required: false
        default: ""
        type: string
      files_suffix:
        description: "Suffix for the files to upload"
        required: false
        default: ""
        type: string
      xcode_version:
        description: "Xcode version"
        required: true
        type: string
      build_with_make:
        description: "Build with make"
        required: false
        default: false
        type: boolean
      macos_version:
        description: "macOS version"
        required: true
        type: string
      needs_xcframework:
        description: "Whether the workflow needs to download the XCFramework."
        required: false
        default: false
        type: boolean

jobs:
  common-ui-tests:
    name: UI Tests Common
    runs-on: ${{ inputs.macos_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Print hardware info
        shell: bash
        run: system_profiler SPHardwareDataType

      - name: Print available disk space
        shell: bash
        run: df -h

      - name: Setup Ruby
        uses: ruby/setup-ruby@13e7a03dc3ac6c3798f4570bfead2aed4d96abfb # v1.244.0
        with:
          bundler-cache: true

      - run: ./scripts/ci-select-xcode.sh ${{ inputs.xcode_version }}

      - run: make init-ci-build
        if: ${{ inputs.build_with_make }}

      - run: make xcode-ci
        if: ${{ inputs.build_with_make }}

      - name: Add Microphone permissions
        uses: ./.github/actions/add-microphone-permissions

      - name: Download XCFramework
        if: ${{ inputs.needs_xcframework }}
        uses: actions/download-artifact@v4
        with:
          name: xcframework-${{github.sha}}-sentry-static
          path: Carthage/

      - name: Unzip XCFramework
        if: ${{ inputs.needs_xcframework }}
        run: |
          unzip -o Carthage/Sentry.xcframework.zip -d Carthage/

      - name: Run Fastlane with retry
        run: |
          set +e  # Don't exit on failure, handle retries manually
          
          max_attempts=3
          attempt=1
          success=false
          
          while [ $attempt -le $max_attempts ] && [ "$success" = false ]; do
            echo "🔄 UI test attempt $attempt of $max_attempts"
            
            # Clean up any previous test artifacts
            rm -rf fastlane/test_results/ || true
            
            # Run the fastlane command
            if bundle exec fastlane ${{ inputs.fastlane_command }} ${{ inputs.fastlane_command_extra_arguments }}; then
              echo "✅ UI tests passed on attempt $attempt"
              success=true
            else
              echo "❌ UI tests failed on attempt $attempt"
              
              if [ $attempt -lt $max_attempts ]; then
                echo "🔄 Preparing for retry..."
                
                # Clean up simulator state before retry
                echo "🧹 Cleaning simulator state..."
                xcrun simctl shutdown all 2>/dev/null || true
                xcrun simctl erase all 2>/dev/null || true
                
                # Wait for system to stabilize
                sleep 30
                
                # Try to restart any simulators that might be needed
                if command -v ./scripts/ci-prepare-simulator.sh >/dev/null 2>&1; then
                  echo "🚀 Re-preparing simulators..."
                  ./scripts/ci-prepare-simulator.sh ${{ inputs.xcode_version }} || true
                fi
              fi
              
              ((attempt++))
            fi
          done
          
          if [ "$success" = false ]; then
            echo "💥 All UI test attempts failed"
            exit 1
          fi

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@a83fd2b5d58d4fc702e690c1ea688d702d28d281 # v5.6.1
        if: always()
        with:
          report_paths: build/reports/*junit.xml
          fail_on_failure: true
          fail_on_parse_error: true
          detailed_summary: true

      - name: Upload Result Bundle
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ${{ inputs.fastlane_command }}${{ inputs.files_suffix }}
          path: |
            fastlane/test_results/**/*.xcresult

      - name: Upload iOS Simulator Crash Logs
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ${{ inputs.fastlane_command }}${{ inputs.files_suffix }}_crash_logs
          path: |
            ~/Library/Logs/DiagnosticReports/**

      - name: Archiving Raw Test Logs
        uses: actions/upload-artifact@v4
        if: ${{ failure() || cancelled() }}
        with:
          name: ${{ inputs.fastlane_command }}${{ inputs.files_suffix }}_raw_output
          path: |
            ~/Library/Logs/scan/*.log
            ./fastlane/test_output/**

      - name: Store screenshot
        uses: ./.github/actions/capture-screenshot
        if: failure()
        with:
          suffix: ${{ inputs.fastlane_command }}${{ inputs.files_suffix }}
