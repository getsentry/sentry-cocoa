name: Build
on:
  push:
    branches:
      - main
      - release/**

  pull_request:
    paths:
      - "Sources/**"
      - "test-server/**"
      - "Samples/**"
      - ".github/workflows/build.yml"
      - "fastlane/**"
      - "scripts/ci-select-xcode.sh"
      - Sentry.xcworkspace/**
      - Sentry.xcodeproj/**
      - Gemfile.lock
      - "Package.swift"
      - "scripts/build-xcframework.sh"
      - "Samples/iOS-Swift/iOS-Swift.yml"
      - "Samples/iOS-Swift/iOS-Swift.xcconfig"
      - "Samples/iOS-Swift/iOS-SwiftClilp.xcconfig"
      - "Samples/iOS13-Swift/iOS13-Swift.yml"
      - "Samples/iOS13-Swift/iOS13-Swift.xcconfig"
      - "Samples/SessionReplay-CameraTest/SessionReplay-CameraTest.yml"
      - "Samples/SessionReplay-CameraTest/SessionReplay-CameraTest.xcconfig"

# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-a-fallback-value
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # We had issues that the release build was broken on main.
  # With this we catch potential issues already in the PR.
  ios-swift-release:
    name: Release Build of iOS Swift
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      - run: ./scripts/ci-select-xcode.sh 16.3
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - run: make init-ci-build
      - run: make xcode
      - name: Run Fastlane
        env:
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY: ${{ secrets.APP_STORE_CONNECT_KEY }}
          FASTLANE_KEYCHAIN_PASSWORD: ${{ secrets.FASTLANE_KEYCHAIN_PASSWORD }}
          MATCH_GIT_PRIVATE_KEY: ${{ secrets.MATCH_GIT_PRIVATE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_USERNAME: ${{ secrets.MATCH_USERNAME }}
        run: bundle exec fastlane build_ios_swift
        shell: sh

  build-sample:
    name: Sample ${{ matrix.scheme }}
    runs-on: macos-15
    strategy:
      fail-fast: false
      matrix:
        # other sample projects are built in ui-tests
        include:
          - scheme: macOS-Swift
          - scheme: iOS13-Swift
          - scheme: watchOS-Swift WatchKit App
          - scheme: macOS-SwiftUI
          - scheme: SessionReplay-CameraTest
          - scheme: visionOS-Swift

    steps:
      - uses: actions/checkout@v4
      - run: ./scripts/ci-select-xcode.sh 16.3
      - run: make init-ci-build
      - run: make xcode

      # Note: Due to complexity in implementing the CODE_SIGNING_ALLOWED flag in the sentry-xcodebuild.sh script,
      #       we did not yet migrate this step to use the script yet.
      - run: >-
          env NSUnbufferedIO=YES
          xcodebuild
          -workspace Sentry.xcworkspace
          -scheme '${{matrix.scheme}}'
          -configuration Debug
          CODE_SIGNING_ALLOWED="NO"
          build

      - name: Archiving Raw Build Logs
        uses: actions/upload-artifact@v4
        if: ${{ failure() || cancelled() }}
        with:
          name: raw-build-output-scheme-${{matrix.scheme}}
          path: |
            raw-build-output.log

  check-debug-without-UIKit:
    name: Check no UIKit linkage (DebugWithoutUIKit)
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - name: Build for Debug
        run: |
          ./scripts/sentry-xcodebuild.sh \
            --platform iOS \
            --os latest \
            --ref ${{ github.ref }} \
            --command build \
            --device "iPhone 14" \
            --configuration DebugWithoutUIKit \
            --derived-data uikit-check-build
      - name: Ensure UIKit is not linked
        run: ./scripts/check-uikit-linkage.sh DebugWithoutUIKit uikit-check-build unlinked SentryWithoutUIKit

  check-release-without-UIKit:
    name: Check no UIKit linkage (ReleaseWithoutUIKit)
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - name: Build for Release
        run: |
          ./scripts/sentry-xcodebuild.sh \
            --platform iOS \
            --os latest \
            --ref ${{ github.ref }} \
            --command build \
            --device "iPhone 14" \
            --configuration ReleaseWithoutUIKit \
            --derived-data uikit-check-build
      - name: Ensure UIKit is not linked
        run: ./scripts/check-uikit-linkage.sh ReleaseWithoutUIKit uikit-check-build unlinked SentryWithoutUIKit

  check-debug-with-UIKit:
    name: Check UIKit linkage (Debug)
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - name: Build for Debug
        run: |
          ./scripts/sentry-xcodebuild.sh \
            --platform iOS \
            --os latest \
            --ref ${{ github.ref }} \
            --command build \
            --device "iPhone 14" \
            --configuration Debug \
            --derived-data uikit-check-build
      - name: Ensure UIKit is linked
        run: ./scripts/check-uikit-linkage.sh Debug uikit-check-build linked Sentry

  check-release-with-UIKit:
    name: Check UIKit linkage (Release)
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - name: Build for Release
        run: |
          ./scripts/sentry-xcodebuild.sh \
            --platform iOS \
            --os latest \
            --ref ${{ github.ref }} \
            --command build \
            --device "iPhone 14" \
            --configuration Release \
            --derived-data uikit-check-build
      - name: Ensure UIKit is linked
        run: ./scripts/check-uikit-linkage.sh Release uikit-check-build linked Sentry

    # The compiler only evaluates SentryAsyncSafeLogs that get printed based on the SENTRY_ASYNC_SAFE_LOG_LEVEL.
    # So if the level is set to error, which is the default, and a SENTRY_ASYNC_SAFE_LOG_DEBUG has a compiler error,
    # you only get the compiler error when setting the SENTRY_ASYNC_SAFE_LOG_LEVEL to SENTRY_ASYNC_SAFE_LOG_LEVEL_DEBUG or lower.
  check-compiling-async-safe-logs:
    name: Check compiling Async Safe Logs
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4

      # If the SentryAsyncSafeLog doesn't contain the SENTRY_ASYNC_SAFE_LOG_LEVEL_ERROR this fails.
      - name: Async Safe Log Level is Error
        run: grep -c "SENTRY_ASYNC_SAFE_LOG_LEVEL SENTRY_ASYNC_SAFE_LOG_LEVEL_ERROR" Sources/Sentry/SentryAsyncSafeLog.h

      - name: Set Async Safe Log Level to Debug
        run: |
          sed -i '' 's/#define SENTRY_ASYNC_SAFE_LOG_LEVEL SENTRY_ASYNC_SAFE_LOG_LEVEL_ERROR/#define SENTRY_ASYNC_SAFE_LOG_LEVEL SENTRY_ASYNC_SAFE_LOG_LEVEL_TRACE/' Sources/Sentry/SentryAsyncSafeLog.h
        shell: bash

      - run: ./scripts/ci-select-xcode.sh 16.3

      - name: Build for Debug
        run: |
          ./scripts/sentry-xcodebuild.sh \
            --platform iOS \
            --os latest \
            --ref ${{ github.ref }} \
            --command build \
            --device "iPhone 16" \
            --configuration Debug
