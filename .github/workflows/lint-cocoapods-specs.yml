name: Lint CocoaPods Specs

on:
  push:
    branches:
      - main
    paths:
      - "Sources/**"
      - "Tests/**"
      - "test-server/**"
      - "Samples/**"
      - ".github/workflows/lint-cocoapods-specs.yml"
      - "scripts/ci-select-xcode.sh"
      - "scripts/ci-diagnostics.sh"
      - "Makefile" # Make commands used for linting setup
      - "Brewfile*" # Tools installation affects linting environment
      - ".swiftlint.yml"

  pull_request:

# Concurrency configuration:
# - We use workflow-specific concurrency groups to prevent multiple lint runs on the same code,
#   as linting checks are deterministic and don't require parallel validation.
# - For pull requests, we cancel in-progress runs when new commits are pushed since only the
#   latest linting matters for merge decisions.
# - For main branch pushes, we never cancel formatting checks to ensure our code maintains consistent style
#   standards across the entire project.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # This job detects if the PR contains changes that require running CocoaPods specs linting.
  # If yes, the job will output a flag that will be used by the next jobs to run the linting.
  # If no, the job will output a flag that will be used by the next jobs to skip running the linting.
  # At the end of this workflow, we run a check that validates that either all linting jobs passed or were
  # skipped, called lint_cocoapods_Specs-required-check.
  files-changed:
    name: Detect File Changes
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      run_lint_cocoapods_Specs_for_prs: ${{ steps.changes.outputs.run_lint_cocoapods_Specs_for_prs }}
    steps:
      - uses: actions/checkout@v5
      - name: Get changed files
        id: changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        with:
          token: ${{ github.token }}
          filters: .github/file-filters.yml

  lint-podspec:
    name: ${{ matrix.podspec}} ${{ matrix.library_type }} ${{ matrix.platform}}
    if: github.event_name != 'pull_request' || needs.files-changed.outputs.run_lint_cocoapods_Specs_for_prs == 'true'
    needs: files-changed
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        podspec: ["Sentry", "SentrySwiftUI"]
        platform: ["ios", "macos", "tvos", "watchos"]
        library_type: ["dynamic", "static"]

    steps:
      - uses: actions/checkout@v5
      - run: ./scripts/ci-select-xcode.sh 15.4
      # We need to update the spec-repo, because it can happen that it is not up to date and then the lint fails.
      - run: pod repo update
      - name: Validate Podspec
        run: ./scripts/pod-lib-lint.sh ${{ matrix.platform }} ${{ matrix.podspec}} ${{ matrix.library_type}}
      - name: Run CI Diagnostics
        if: failure()
        run: ./scripts/ci-diagnostics.sh

  lint-hybrid-sdk-podspec:
    name: Sentry/HybridSDK
    if: github.event_name != 'pull_request' || needs.files-changed.outputs.run_lint_cocoapods_Specs_for_prs == 'true'
    needs: files-changed
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v5
      - run: ./scripts/ci-select-xcode.sh 15.4
      - run: pod repo update
      - name: Validate HybridPod Podspec
        run: pod lib lint ./Tests/HybridSDKTest/HybridPod.podspec --allow-warnings --verbose --platforms=ios "--include-podspecs={Sentry.podspec}"
      - name: Run CI Diagnostics
        if: failure()
        run: ./scripts/ci-diagnostics.sh

  # This check validates that either all linting jobs passed or were skipped, which allows us
  # to make linting a required check with only running the linting when required.
  # So, we don't have to run linting, for example, for Changelog or ReadMe changes.

  lint_cocoapods_Specs-required-check:
    needs:
      [
        files-changed,
        lint-podspec,
        lint-hybrid-sdk-podspec,
      ]
    name: Lint CocoaPods Specs
    # This is necessary since a failed/skipped dependent job would cause this job to be skipped
    if: always()
    runs-on: ubuntu-latest
    steps:
      # If any jobs we depend on fails gets cancelled or times out, this job will fail.
      # Skipped jobs are not considered failures.
      - name: Check for failures
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "One of the CocoaPods specs linting jobs has failed." && exit 1
