name: Test
on:
  push:
    branches:
      - master
      - release/**

  pull_request:
    paths:
      - 'Sources/**'
      - 'Tests/**'
      - 'test-server/**'
      - 'Samples/**'
      - '.github/workflows/**'

jobs:
  unit-tests:
    name: Unit ${{matrix.platform}} - Xcode ${{matrix.xcode}}
    runs-on: macos-11 
    strategy:
      matrix:
        # Can't run tests on watchOS because XCTest is not available  
        platform: ["macOS","Catalyst", "iOS", "tvOS"]
        
        # We can't use Xcode 10.3 because our tests contain a reference to MacCatalyst,
        # which is only available since iOS 13 / Xcode 11.
        xcode: ["13.0", "12.5.1", "11.7"]

    steps:
      - uses: actions/checkout@v2

      - name: Cache for Test Server
        uses: actions/cache@v2
        with:
          path: ./test-server/.build
          key: ${{ runner.os }}-spm-${{ hashFiles('./test-server/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      # Only build when the cache couldn't be restored.
      - run: swift build
      # The hash is empty if the file doesn't exist.
        if: hashFiles('./test-server/.build/debug/Run') == ''
        working-directory: test-server

      - name: Run Test Server in Background
        run: swift run &
        working-directory: test-server

      # Select Xcode after starting server, because the server needs Xcode 13
      - run: ./scripts/ci-select-xcode.sh ${{matrix.xcode}}

      - name: Running tests
        # We call a script with the platform so the destination
        # passed to xcodebuild doesn't ends up in the job name, 
        # because GitHub Actions don't provide an easy way of 
        # manipulating string in expressions.
        run: ./scripts/xcode-test.sh ${{matrix.platform}}

      # We can upload all coverage reports, because codecov merges them.
      # See https://docs.codecov.io/docs/merging-reports
      # Checkout .codecov.yml to see the config of Codecov
      - name: Push code coverage to codecov
        uses: codecov/codecov-action@v1
        
        # SentrySystemEventsBreadcrumbsTest only run on Catalyst and iOS
        # so the coverage report shows a reduced coverage.
        if: ${{ contains(matrix.platform, 'Mac Catalyst') || contains(matrix.platform, 'iOS') }}


  # Ensure the swizzling of network classes doesn't break the normal functionality of web requests.
  # We borrow the tests of Alamofire under the MIT license: https://github.com/Alamofire/Alamofire.
  # The following steps checkout Alamofire and apply a github patch to the project. The patch adds
  # Sentry to the tests with auto performance monitoring enabled. While the tests are running a 
  # transaction is bound to the scope, so the Sentry SDK adds spans to the transaction. This doesn't
  # validate if the Sentry SDK adds proper spans. It only validates that the swizzling logic
  # doesn't break web requests.
  web-request-tests:
    name: Integration Web Requests
    runs-on: macos-11
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'Alamofire/Alamofire'
          ref: '26b8c9a41aa03f0356f957ab62e9ca6b1068afe0'
     
      # Use github.event.pull_request.head.sha instead of github.sha when available as 
      # the github.sha is the pre merge commit id for PRs.
      # See https://github.community/t/github-sha-isnt-the-value-expected/17903/17906.
      - name: Download Patch
        run: >-
          if [[ "${{ github.event.pull_request.head.sha }}" != "" ]]; then
            curl https://raw.githubusercontent.com/getsentry/sentry-cocoa/${{ github.event.pull_request.head.sha }}/scripts/add-sentry-to-alamofire.patch --output sentry.patch
          else
            curl https://raw.githubusercontent.com/getsentry/sentry-cocoa/${{ github.sha  }}/scripts/add-sentry-to-alamofire.patch --output sentry.patch
          fi  
        shell: bash

      - name: Set SPM revision to current git commit
        run: >-
          if [[ "${{ github.event.pull_request.head.sha }}" != "" ]]; then
            sed -i '' 's/__GITHUB_REVISION_PLACEHOLDER__/${{ github.event.pull_request.head.sha }}/g' sentry.patch 
          else
            sed -i '' 's/__GITHUB_REVISION_PLACEHOLDER__/${{ github.sha }}/g' sentry.patch 
          fi  
        shell: bash
      
      - run: git apply sentry.patch  

      - name: Install Firewalk
        run: brew install alamofire/alamofire/firewalk

      - name: Start Firewalk
        run: firewalk &
 
      - name: Validate Firewalk is running
        run: curl http://localhost:8080/

      - name: Run tests
        run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -project "Alamofire.xcodeproj" -scheme "Alamofire iOS" -destination "OS=15.0,name=iPhone 13 Pro" test | xcpretty

  ui-tests:
    name: UI Tests for ${{matrix.target}}
    runs-on: macos-11
    strategy:
      matrix:
        target: ["ios_swiftui", "ios_objc", "tvos_swift" ]

    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/ci-select-xcode.sh 

      - name: Run Fastlane
        run: fastlane ui_tests_${{matrix.target}}
        shell: sh

  ios-swift-saucelabs:
    name: SauceLabs for iOS Swift
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/ci-select-xcode.sh 
      - run: npm install -g saucectl

      - run: fastlane build_ios_swift_ui_test
        env:
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY: ${{ secrets.APP_STORE_CONNECT_KEY }}
          FASTLANE_KEYCHAIN_PASSWORD: ${{ secrets.FASTLANE_KEYCHAIN_PASSWORD }}
          MATCH_GIT_PRIVATE_KEY: ${{ secrets.MATCH_GIT_PRIVATE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_USERNAME: ${{ secrets.MATCH_USERNAME }}

      - name: Run Tests in Saucelab
        env:
          SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}
          SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}
        run: saucectl run
        
